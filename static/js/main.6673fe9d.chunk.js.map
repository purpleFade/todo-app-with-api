{"version":3,"sources":["types/Status.ts","utils/fetchClient.ts","types/ErrorType.ts","api/todos.ts","constants/UserId.ts","components/TodoContext/TodoContext.tsx","components/Footer/Footer.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/ErrorMessage/ErrorMessage.tsx","components/Header/Header.tsx","App.tsx","utils/helpers.tsx","index.tsx"],"names":["Status","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorType","client","deleteTodo","id","USER_ID","AppContext","createContext","todos","status","All","setTodos","setStatus","selectedTodoIds","setSelectedTodoIds","handleToggleCompleted","clearCompleted","todoTitle","setTodoTitle","tempTodo","setTempTodo","addTodo","error","setError","loading","setLoading","updateTodoItem","AppProvider","children","useState","useCallback","todoId","currentIds","todoService","currentTodos","filter","post","catch","ids","splice","indexOf","cantDeleteTodo","finally","updatedTodo","title","todo","newTodos","index","findIndex","newTodo","cantUpdateTodo","completedTodos","todoToFind","completed","map","completedTodo","todoToFilter","todoToChange","newIds","userId","cantAddTodo","value","useMemo","Provider","Footer","uncompletedTodosCount","isSomeTodosCompleted","useContext","className","data-cy","href","cn","selected","onClick","Active","Completed","type","disabled","TodoItem","initialTitle","editTitle","setEditTitle","isEdit","setIsEdit","isSaving","setIsSaving","isDeleting","setIsDeleting","editNameRef","useRef","useEffect","current","focus","handleDeleteClick","todoItem","saveTitle","trim","onChange","checked","onSubmit","event","preventDefault","placeholder","ref","target","onKeyUp","key","onBlur","onDoubleClick","aria-label","TodoList","ErrorMessage","Header","isEveryTodosCompleted","every","isChecked","setIsChecked","fieldRender","active","titleIsEmpty","e","App","cantLoadTodos","filterTodos","prepareTodos","todosOnPage","length","some","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6673fe9d.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // DON'T change the delay it is required for tests\n  return wait(100)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorType {\n  'cantLoadTodos' = 'Unable to load todos',\n  'titleIsEmpty' = 'Title should not be empty',\n  'cantAddTodo' = 'Unable to add a todo',\n  'cantDeleteTodo' = 'Unable to delete a todo',\n  'cantUpdateTodo' = 'Unable to update a todo',\n}\n","/* eslint-disable max-len */\nimport { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const createTodo = ({ userId, title, completed }: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', { userId, title, completed });\n};\n\nexport const setCompleted = ({ id, completed }: Todo) => {\n  return client.patch<Todo>(`/todos/${id}`, { completed });\n};\n\nexport const updateTodo = ({ id, title }: Todo) => {\n  return client.patch<Todo>(`/todos/${id}`, { title });\n};\n","export const USER_ID = 12048;\n","/* eslint-disable max-len */\nimport React, {\n  createContext, useCallback, useMemo, useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\nimport * as todoService from '../../api/todos';\nimport { USER_ID } from '../../constants/UserId';\nimport { ErrorType } from '../../types/ErrorType';\n\ninterface AppContextType {\n  todos: Todo[];\n  status: Status;\n  setTodos: (arg: Todo[]) => void;\n  setStatus: (arg: Status) => void;\n  deleteTodo: (arg: number) => void;\n  selectedTodoIds: number[];\n  setSelectedTodoIds: (arg: number[]) => void;\n  handleToggleCompleted: (arg: Todo) => void;\n  clearCompleted: () => void;\n  todoTitle: string;\n  setTodoTitle: (arg: string) => void;\n  tempTodo: Todo | null;\n  setTempTodo: (arg: Todo | null) => void;\n  addTodo: (arg: string) => void;\n  error: ErrorType | null;\n  setError: (arg: ErrorType | null) => void;\n  loading: boolean;\n  setLoading: (arg: boolean) => void;\n  updateTodoItem: (arg: Todo) => void;\n}\n\nexport const AppContext = createContext<AppContextType>({\n  todos: [],\n  status: Status.All,\n  setTodos: () => {},\n  setStatus: () => {},\n  deleteTodo: () => {},\n  selectedTodoIds: [],\n  setSelectedTodoIds: () => {},\n  handleToggleCompleted: () => {},\n  clearCompleted: () => {},\n  todoTitle: '',\n  setTodoTitle: () => {},\n  tempTodo: null,\n  setTempTodo: () => {},\n  addTodo: () => {},\n  error: null,\n  setError: () => {},\n  loading: false,\n  setLoading: () => {},\n  updateTodoItem: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AppProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [status, setStatus] = useState<Status>(Status.All);\n  const [selectedTodoIds, setSelectedTodoIds] = useState<number[]>([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [error, setError] = useState<ErrorType | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const deleteTodo = useCallback((todoId: number) => {\n    setSelectedTodoIds((currentIds) => [...currentIds, todoId]);\n    todoService\n      .deleteTodo(todoId)\n      .then(() => {\n        setTimeout(() => {\n          setTodos((currentTodos) => currentTodos.filter((post) => post.id !== todoId));\n        }, 500);\n      })\n      .catch(() => {\n        setSelectedTodoIds((ids) => {\n          ids.splice(ids.indexOf(todoId), 1);\n\n          return ids;\n        });\n        setError(ErrorType.cantDeleteTodo);\n        setTimeout(() => setError(null), 2000);\n      })\n      .finally(() => setTimeout(\n        () => setSelectedTodoIds((ids) => ids.splice(ids.indexOf(todoId), 1)),\n        500,\n      ));\n  }, []);\n\n  const updateTodoItem = useCallback((updatedTodo: Todo) => {\n    setLoading(true);\n    setSelectedTodoIds((ids) => [...ids, updatedTodo.id]);\n\n    todoService.updateTodo(updatedTodo)\n      .then((todo) => {\n        setTodos((currentTodos) => {\n          const newTodos = [...currentTodos];\n          const index = newTodos.findIndex(\n            (newTodo) => newTodo.id === updatedTodo.id,\n          );\n\n          newTodos.splice(index, 1, todo);\n\n          return newTodos;\n        });\n      })\n      .catch(() => {\n        setError(ErrorType.cantUpdateTodo);\n        setTimeout(() => setError(null), 2000);\n      })\n      .finally(() => {\n        setLoading(false);\n        setSelectedTodoIds((ids) => ids.filter((id) => id !== updatedTodo.id));\n      });\n  }, []);\n\n  const clearCompleted = useCallback(() => {\n    const completedTodos = todos.filter((todoToFind) => todoToFind.completed);\n\n    setSelectedTodoIds((currentIds) => [\n      ...currentIds,\n      ...completedTodos.map((completedTodo) => completedTodo.id),\n    ]);\n\n    completedTodos.map((completedTodo) => todoService.deleteTodo(completedTodo.id));\n\n    setTimeout(() => {\n      setTodos((currentTodos) => currentTodos.filter((todoToFilter) => !todoToFilter.completed));\n    }, 500);\n  }, [todos]);\n\n  const handleToggleCompleted = useCallback((todoToChange: Todo) => {\n    setSelectedTodoIds((currentIds) => [...currentIds, todoToChange.id]);\n    const updatedTodo = {\n      ...todoToChange,\n      completed: !todoToChange.completed,\n    };\n\n    todoService\n      .setCompleted(updatedTodo)\n      .then((todo) => {\n        setTodos((currentTodos) => {\n          const newTodos = [...currentTodos];\n          const index = newTodos.findIndex(\n            (newTodo) => newTodo.id === updatedTodo.id,\n          );\n\n          newTodos.splice(index, 1, todo);\n\n          return newTodos;\n        });\n      })\n      .finally(() => setTimeout(() => setSelectedTodoIds((ids) => {\n        const newIds = [...ids];\n\n        newIds.splice(ids.indexOf(todoToChange.id), 1);\n\n        return newIds;\n      })));\n  }, []);\n\n  const addTodo = (title: string) => {\n    setLoading(true);\n    setSelectedTodoIds((ids) => [...ids, 0]);\n    setTempTodo({\n      id: 0,\n      userId: USER_ID,\n      title,\n      completed: false,\n    });\n\n    todoService\n      .createTodo({\n        userId: USER_ID,\n        title,\n        completed: false,\n      })\n      .then((newTodo) => {\n        setTodoTitle('');\n        setTimeout(() => {\n          setTodos((currentTodos) => [...currentTodos, newTodo]);\n        }, 500);\n      })\n      .catch(() => {\n        setSelectedTodoIds((ids) => ids.filter((id) => id !== 0));\n        setError(ErrorType.cantAddTodo);\n        setTimeout(() => setError(null), 2000);\n      })\n      .finally(() => {\n        setLoading(false);\n        setSelectedTodoIds((ids) => ids.filter((id) => id !== 0));\n        setTimeout(() => setTempTodo(null), 500);\n      });\n  };\n\n  const value = useMemo(\n    () => ({\n      todos,\n      status,\n      setTodos,\n      setStatus,\n      deleteTodo,\n      selectedTodoIds,\n      setSelectedTodoIds,\n      handleToggleCompleted,\n      clearCompleted,\n      todoTitle,\n      setTodoTitle,\n      tempTodo,\n      setTempTodo,\n      addTodo,\n      error,\n      setError,\n      loading,\n      setLoading,\n      updateTodoItem,\n    }),\n    [\n      todos,\n      status,\n      selectedTodoIds,\n      deleteTodo,\n      handleToggleCompleted,\n      clearCompleted,\n      todoTitle,\n      tempTodo,\n      error,\n      loading,\n    ],\n  );\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { Status } from '../../types/Status';\nimport { AppContext } from '../TodoContext/TodoContext';\n\ntype Props = {\n  uncompletedTodosCount: number;\n  status: Status;\n  setStatus: (arg: Status) => void;\n  isSomeTodosCompleted: boolean;\n};\n\nexport const Footer: React.FC<Props> = ({\n  uncompletedTodosCount,\n  status,\n  setStatus,\n  isSomeTodosCompleted,\n}) => {\n  const { clearCompleted } = useContext(AppContext);\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"TodosCounter\">\n        {`${uncompletedTodosCount} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          href=\"#/\"\n          className={cn('filter__link', {\n            selected: status === Status.All,\n          })}\n          data-cy=\"FilterLinkAll\"\n          onClick={() => setStatus(Status.All)}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={cn('filter__link', {\n            selected: status === Status.Active,\n          })}\n          data-cy=\"FilterLinkActive\"\n          onClick={() => setStatus(Status.Active)}\n        >\n          Active\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={cn('filter__link', {\n            selected: status === Status.Completed,\n          })}\n          data-cy=\"FilterLinkCompleted\"\n          onClick={() => setStatus(Status.Completed)}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        type=\"button\"\n        className={cn('todoapp__clear-completed', {\n          disabled: !isSomeTodosCompleted,\n        })}\n        data-cy=\"ClearCompletedButton\"\n        disabled={!isSomeTodosCompleted}\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport cn from 'classnames';\nimport React, {\n  useContext, useState, useRef, useEffect,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { AppContext } from '../TodoContext/TodoContext';\nimport * as todoService from '../../api/todos';\n\ntype Props = {\n  todo: Todo;\n};\n\nconst ENTER = 'Enter';\nconst ESC = 'Escape';\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { todos, setTodos, updateTodoItem } = useContext(AppContext);\n  const { id, title: initialTitle, completed } = todo;\n\n  const [editTitle, setEditTitle] = useState(initialTitle);\n  const [isEdit, setIsEdit] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false); // Track delete loader separately\n\n  const editNameRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (editNameRef.current) {\n      editNameRef.current.focus();\n    }\n  }, [isEdit]);\n\n  const handleToggleViewChange = () => {\n    setTodos(\n      todos.map((todoItem) => (todoItem.id === id\n        ? { ...todoItem, completed: !completed } : todoItem)),\n    );\n  };\n\n  const handleTodoTitleChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setEditTitle(event.target.value);\n  };\n\n  const handleDeleteClick = () => {\n    setIsDeleting(true);\n    todoService.deleteTodo(id).then(() => {\n      setTodos(todos.filter((todoItem) => todoItem.id !== id));\n    }).finally(() => {\n      setIsDeleting(false);\n    });\n    setTodos(todos.filter((todoItem) => todoItem.id !== id));\n  };\n\n  const saveTitle = (value: string) => {\n    if (!value.trim()) {\n      handleDeleteClick(); // Delete the todo if the title is empty\n\n      return;\n    }\n\n    if (value.trim() === initialTitle) {\n      // Cancel editing if the new title is the same as the old one\n      setIsEdit(false);\n\n      return;\n    }\n\n    setIsSaving(true);\n    const updatedTodo = { ...todo, title: value.trim() };\n\n    if (value.trim() !== initialTitle) {\n      updateTodoItem(updatedTodo);\n      setEditTitle(value.trim());\n      setIsEdit(false);\n      setIsSaving(false);\n    } else {\n      setIsEdit(false);\n      setIsSaving(false);\n    }\n  };\n\n  const handleTodoTitleBlur = () => {\n    saveTitle(editTitle);\n  };\n\n  const handleTodoTitleKeyUp = (event: React.KeyboardEvent) => {\n    event.preventDefault();\n\n    if (event.key === ENTER) {\n      saveTitle(editTitle);\n    }\n\n    if (event.key === ESC) {\n      setEditTitle(initialTitle);\n      setIsEdit(false);\n    }\n  };\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault(); // Prevent the default form submission behavior\n    saveTitle(editTitle);\n    setIsEdit(false);\n  };\n\n  return (\n    <div\n      className={cn('todo', {\n        completed: !isEdit && completed,\n      })}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          onChange={handleToggleViewChange}\n          checked={completed}\n        />\n      </label>\n\n      {!isEdit ? (\n        <span\n          onDoubleClick={() => {\n            setIsEdit(true);\n            setEditTitle(initialTitle);\n          }}\n          className=\"todo__title\"\n          data-cy=\"TodoTitle\"\n        >\n          {initialTitle}\n        </span>\n      ) : (\n        <>\n          <form onSubmit={handleFormSubmit}>\n            <input\n              type=\"text\"\n              data-cy=\"TodoTitleField\"\n              className=\"todo__title-field\"\n              placeholder=\"Empty todo will be deleted\"\n              ref={editNameRef}\n              onChange={handleTodoTitleChange}\n              onKeyUp={handleTodoTitleKeyUp}\n              onBlur={handleTodoTitleBlur}\n              value={editTitle}\n              disabled={isSaving}\n            />\n          </form>\n          {isSaving && (\n            <div data-cy=\"TodoLoader\" className=\"modal overlay\">\n              <div className=\"modal-background has-background-white-ter\" />\n              <div className=\"loader\" />\n            </div>\n          )}\n        </>\n      )}\n\n      <button\n        type=\"button\"\n        className=\"todo__remove\"\n        data-cy=\"TodoDelete\"\n        aria-label=\"deleteTodo\"\n        onClick={handleDeleteClick}\n      >\n        ×\n      </button>\n\n      {isDeleting && (\n        <div data-cy=\"TodoLoader\" className=\"modal overlay\">\n          <div className=\"modal-background has-background-white-ter\" />\n          <div className=\"loader\" />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Todo as TodoType } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { AppContext } from '../TodoContext/TodoContext';\n\ntype Props = {\n  todos: TodoType[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const { tempTodo } = useContext(AppContext);\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n\n      {tempTodo && <TodoItem key={tempTodo?.id} todo={tempTodo} />}\n    </section>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useContext } from 'react';\nimport { AppContext } from '../TodoContext/TodoContext';\n\nexport const ErrorMessage: React.FC = () => {\n  const { error, setError } = useContext(AppContext);\n\n  return (\n    <div className=\"notification is-danger is-light has-text-weight-normal\">\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => setError(null)}\n      />\n      {error}\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import cn from 'classnames';\nimport React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport { AppContext } from '../TodoContext/TodoContext';\nimport { ErrorType } from '../../types/ErrorType';\n\ntype Props = {\n  isEveryTodosCompleted: boolean;\n};\n\nexport const Header: React.FC<Props> = ({ isEveryTodosCompleted }) => {\n  const {\n    todoTitle, setTodoTitle, addTodo, setError, loading, todos, setTodos,\n  }\n    = useContext(AppContext);\n\n  const [isChecked, setIsChecked] = useState(\n    todos.every((todo) => todo.completed),\n  );\n\n  const fieldRender = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (todos.every((todo) => todo.completed)) {\n      setIsChecked(true);\n    } else {\n      setIsChecked(false);\n    }\n  }, [todos]);\n\n  const handleToggleAllChange = () => {\n    if (isChecked) {\n      setIsChecked(false);\n    } else {\n      setIsChecked(true);\n    }\n\n    setTodos(todos.map((todo) => ({ ...todo, completed: !isChecked })));\n  };\n\n  useEffect(() => {\n    if (fieldRender.current && !fieldRender.current.disabled) {\n      fieldRender.current.focus();\n    }\n  });\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event?.preventDefault();\n    if (!todoTitle.trim()) {\n      setError(ErrorType.titleIsEmpty);\n\n      setTimeout(() => setError(null), 2000);\n\n      return;\n    }\n\n    addTodo(todoTitle.trim());\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        className={cn('todoapp__toggle-all text-invisible', {\n          active: isEveryTodosCompleted,\n        })}\n        data-cy=\"ToggleAllButton\"\n        onClick={handleToggleAllChange}\n      >\n        {' '}\n      </button>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          ref={fieldRender}\n          value={todoTitle}\n          onChange={(e) => setTodoTitle(e.target.value)}\n          disabled={loading}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, {\n  useCallback, useContext, useEffect, useMemo,\n} from 'react';\nimport { UserWarning } from './UserWarning';\nimport { Footer } from './components/Footer/Footer';\nimport { getTodos } from './api/todos';\nimport { prepareTodos } from './utils/helpers';\nimport { ErrorType } from './types/ErrorType';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { AppContext } from './components/TodoContext/TodoContext';\nimport { USER_ID } from './constants/UserId';\nimport { ErrorMessage } from './components/ErrorMessage/ErrorMessage';\nimport { Header } from './components/Header/Header';\n\nexport const App: React.FC = () => {\n  const {\n    todos, setTodos, status, setStatus, error, setError,\n  }\n    = useContext(AppContext);\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(setTodos)\n      .catch(() => setError(ErrorType.cantLoadTodos));\n  }, [setTodos, setError]);\n\n  const filterTodos = useCallback(() => {\n    return prepareTodos({\n      todos,\n      status,\n    });\n  }, [todos, status]);\n\n  const todosOnPage = useMemo(() => filterTodos(), [filterTodos]);\n\n  const uncompletedTodosCount = todos.filter((todo) => !todo.completed).length;\n\n  const isSomeTodosCompleted = todos.some((todo) => todo.completed);\n\n  const isEveryTodosCompleted = todosOnPage.every((todo) => todo.completed);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header isEveryTodosCompleted={isEveryTodosCompleted} />\n\n        <TodoList todos={todosOnPage} />\n\n        {todos.length > 0 && (\n          <Footer\n            uncompletedTodosCount={uncompletedTodosCount}\n            status={status}\n            setStatus={setStatus}\n            isSomeTodosCompleted={isSomeTodosCompleted}\n          />\n        )}\n\n        {error && todos.length > 0 && <ErrorMessage />}\n      </div>\n    </div>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\ntype TodoList = {\n  status: Status;\n  todos: Todo[];\n};\n\nexport const prepareTodos = ({ todos, status }: TodoList) => {\n  switch (status) {\n    case Status.Active:\n      return todos.filter((todo) => !todo.completed);\n\n    case Status.Completed:\n      return todos.filter((todo) => todo.completed);\n\n    default:\n      return todos;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AppProvider } from './components/TodoContext/TodoContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}