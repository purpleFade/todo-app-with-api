{"version":3,"sources":["types/Status.ts","utils/fetchClient.ts","types/ErrorType.ts","api/todos.ts","constants/UserId.ts","components/TodoContext/TodoContext.tsx","components/Footer/Footer.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/ErrorMessage/ErrorMessage.tsx","components/Header/Header.tsx","App.tsx","utils/helpers.tsx","index.tsx"],"names":["Status","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorType","client","deleteTodo","id","USER_ID","AppContext","createContext","todos","status","All","setTodos","setStatus","selectedTodoIds","setSelectedTodoIds","handleToggleCompleted","clearCompleted","todoTitle","setTodoTitle","tempTodo","setTempTodo","addTodo","error","setError","loading","setLoading","updateTodo","handleToggleCompletedAll","handleError","AppProvider","children","useState","useCallback","errorMessage","todoId","currentIds","todoService","currentTodos","filter","post","catch","cantDeleteTodo","finally","ids","completedTodos","todoToFind","completed","map","completedTodo","deletePromises","all","todoToFilter","todoToChange","updatedTodo","todo","newTodos","index","findIndex","newTodo","cantUpdateTodo","every","allNotCompleted","allCompleted","title","userId","cantAddTodo","currentTodo","value","useMemo","Provider","Footer","uncompletedTodosCount","isSomeTodosCompleted","useContext","className","data-cy","href","cn","selected","onClick","Active","Completed","type","disabled","TodoItem","React","memo","loadind","isEditing","setIsEditing","newTitle","setNewTitle","handleSubmit","event","preventDefault","trim","inputRef","useRef","useEffect","current","focus","onDoubleClick","onChange","checked","onSubmit","onBlur","placeholder","ref","e","target","onKeyUp","key","includes","TodoList","ErrorMessage","Header","isEveryTodosCompleted","isChecked","setIsChecked","fieldRender","active","titleIsEmpty","App","cantLoadTodos","filterTodos","prepareTodos","todosOnPage","length","some","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bc878b6.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // DON'T change the delay it is required for tests\n  return wait(100)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorType {\n  'cantLoadTodos' = 'Unable to load todos',\n  'titleIsEmpty' = 'Title should not be empty',\n  'cantAddTodo' = 'Unable to add a todo',\n  'cantDeleteTodo' = 'Unable to delete a todo',\n  'cantUpdateTodo' = 'Unable to update a todo',\n}\n","/* eslint-disable max-len */\nimport { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const createTodo = ({ userId, title, completed }: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', { userId, title, completed });\n};\n\nexport const setCompleted = ({ id, completed }: Todo) => {\n  return client.patch<Todo>(`/todos/${id}`, { completed });\n};\n\nexport const updateTodo = ({ id, title }: Todo) => {\n  return client.patch<Todo>(`/todos/${id}`, { title });\n};\n","export const USER_ID = 12048;\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\nimport * as todoService from '../../api/todos';\nimport { USER_ID } from '../../constants/UserId';\nimport { ErrorType } from '../../types/ErrorType';\n\ninterface AppContextType {\n  todos: Todo[];\n  status: Status;\n  setTodos: (arg: Todo[]) => void;\n  setStatus: (arg: Status) => void;\n  deleteTodo: (arg: number) => void;\n  selectedTodoIds: number[];\n  setSelectedTodoIds: (arg: number[]) => void;\n  handleToggleCompleted: (arg: Todo) => void;\n  clearCompleted: () => void;\n  todoTitle: string;\n  setTodoTitle: (arg: string) => void;\n  tempTodo: Todo | null;\n  setTempTodo: (arg: Todo | null) => void;\n  addTodo: (arg: string) => void;\n  error: ErrorType | null;\n  setError: (arg: ErrorType | null) => void;\n  loading: boolean;\n  setLoading: (arg: boolean) => void;\n  updateTodo: (arg: Todo) => void;\n  handleToggleCompletedAll: () => void;\n  handleError: (errorMessage: ErrorType) => void;\n}\n\nexport const AppContext = createContext<AppContextType>({\n  todos: [],\n  status: Status.All,\n  setTodos: () => {},\n  setStatus: () => {},\n  deleteTodo: () => {},\n  selectedTodoIds: [],\n  setSelectedTodoIds: () => {},\n  handleToggleCompleted: () => {},\n  clearCompleted: () => {},\n  todoTitle: '',\n  setTodoTitle: () => {},\n  tempTodo: null,\n  setTempTodo: () => {},\n  addTodo: () => {},\n  error: null,\n  setError: () => {},\n  loading: false,\n  setLoading: () => {},\n  updateTodo: () => {},\n  handleToggleCompletedAll: () => {},\n  handleError: () => {},\n});\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AppProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [status, setStatus] = useState<Status>(Status.All);\n  const [selectedTodoIds, setSelectedTodoIds] = useState<number[]>([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [error, setError] = useState<ErrorType | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleError = useCallback((errorMessage: ErrorType) => {\n    setError(errorMessage);\n    setTimeout(() => setError(null), 2000);\n  }, []);\n\n  const deleteTodo = useCallback(\n    (todoId: number) => {\n      setSelectedTodoIds((currentIds) => [...currentIds, todoId]);\n      todoService\n        .deleteTodo(todoId)\n        .then(() => {\n          setTimeout(() => {\n            setTodos((currentTodos) => currentTodos.filter((post) => post.id !== todoId));\n          }, 500);\n        })\n        .catch(() => {\n          handleError(ErrorType.cantDeleteTodo);\n        })\n        .finally(() => setTimeout(\n          () => setSelectedTodoIds((ids) => ids.filter((id) => id !== todoId)),\n          500,\n        ));\n    },\n    [handleError],\n  );\n\n  const clearCompleted = useCallback(() => {\n    const completedTodos = todos.filter((todoToFind) => todoToFind.completed);\n\n    setSelectedTodoIds((currentIds) => [\n      ...currentIds,\n      ...completedTodos.map((completedTodo) => completedTodo.id),\n    ]);\n\n    const deletePromises = completedTodos\n      .map((completedTodo) => todoService.deleteTodo(completedTodo.id));\n\n    Promise.all(deletePromises)\n      .then(() => {\n        setTodos((currentTodos) => currentTodos.filter((todoToFilter) => !todoToFilter.completed));\n      })\n      .catch(() => handleError(ErrorType.cantDeleteTodo))\n      .finally(() => completedTodos.map((completedTodo) => setSelectedTodoIds((ids) => ids\n        .filter((id) => id !== completedTodo.id))));\n  }, [todos, handleError]);\n\n  const handleToggleCompleted = useCallback(\n    (todoToChange: Todo) => {\n      setSelectedTodoIds((currentIds) => [...currentIds, todoToChange.id]);\n      const updatedTodo = {\n        ...todoToChange,\n        completed: !todoToChange.completed,\n      };\n\n      todoService\n        .setCompleted(updatedTodo)\n        .then((todo) => {\n          setTodos((currentTodos) => {\n            const newTodos = [...currentTodos];\n            const index = newTodos.findIndex(\n              (newTodo) => newTodo.id === updatedTodo.id,\n            );\n\n            newTodos[index] = todo;\n\n            return newTodos;\n          });\n        })\n        .catch(() => handleError(ErrorType.cantUpdateTodo))\n        .finally(() => setTimeout(() => setSelectedTodoIds((ids) => ids\n          .filter((id) => id !== todoToChange.id))));\n    },\n    [handleError],\n  );\n\n  const handleToggleCompletedAll = useCallback(() => {\n    const notCompleted = todos.every((todo) => todo.completed);\n\n    if (!notCompleted) {\n      const allCompleted = todos.map((todo) => {\n        if (!todo.completed) {\n          handleToggleCompleted(todo);\n        }\n\n        return todo;\n      });\n\n      setTodos(allCompleted);\n    } else {\n      const allNotCompleted = todos.map((todo) => {\n        handleToggleCompleted(todo);\n\n        return todo;\n      });\n\n      setTodos(allNotCompleted);\n    }\n  }, [todos, handleToggleCompleted]);\n\n  const addTodo = useCallback(\n    (title: string) => {\n      setLoading(true);\n      setSelectedTodoIds((ids) => [...ids, 0]);\n      setTempTodo({\n        id: 0,\n        userId: USER_ID,\n        title,\n        completed: false,\n      });\n\n      todoService\n        .createTodo({\n          userId: USER_ID,\n          title,\n          completed: false,\n        })\n        .then((newTodo) => {\n          setTodoTitle('');\n          setTimeout(() => {\n            setTodos((currentTodos) => [...currentTodos, newTodo]);\n          }, 500);\n        })\n        .catch(() => {\n          handleError(ErrorType.cantAddTodo);\n        })\n        .finally(() => {\n          setLoading(false);\n          setSelectedTodoIds((ids) => ids.filter((id) => id !== 0));\n          setTimeout(() => setTempTodo(null), 500);\n        });\n    },\n    [handleError],\n  );\n\n  const updateTodo = useCallback(\n    (updatedTodo: Todo) => {\n      setLoading(true);\n      setSelectedTodoIds((ids) => [...ids, updatedTodo.id]);\n\n      todoService\n        .updateTodo(updatedTodo)\n        .then(() => {\n          setTodos((currentTodos) => currentTodos.map((currentTodo) => (currentTodo\n            .id === updatedTodo.id ? updatedTodo : currentTodo)));\n        })\n        .catch(() => {\n          handleError(ErrorType.cantUpdateTodo);\n        })\n        .finally(() => {\n          setSelectedTodoIds((ids) => ids.filter((id) => id !== updatedTodo.id));\n          setLoading(false);\n        });\n    },\n    [handleError],\n  );\n\n  const value = useMemo(\n    () => ({\n      todos,\n      status,\n      setTodos,\n      setStatus,\n      deleteTodo,\n      selectedTodoIds,\n      setSelectedTodoIds,\n      handleToggleCompleted,\n      clearCompleted,\n      todoTitle,\n      setTodoTitle,\n      tempTodo,\n      setTempTodo,\n      addTodo,\n      error,\n      setError,\n      loading,\n      setLoading,\n      updateTodo,\n      handleToggleCompletedAll,\n      handleError,\n    }),\n    [\n      todos,\n      status,\n      selectedTodoIds,\n      deleteTodo,\n      handleToggleCompleted,\n      clearCompleted,\n      todoTitle,\n      tempTodo,\n      error,\n      loading,\n      updateTodo,\n      handleToggleCompletedAll,\n      addTodo,\n      handleError,\n    ],\n  );\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\nexport const useAppContext = () => useContext(AppContext);\n","import React, { useContext } from 'react';\nimport cn from 'classnames';\nimport { Status } from '../../types/Status';\nimport { AppContext } from '../TodoContext/TodoContext';\n\ntype Props = {\n  uncompletedTodosCount: number;\n  status: Status;\n  setStatus: (arg: Status) => void;\n  isSomeTodosCompleted: boolean;\n};\n\nexport const Footer: React.FC<Props> = ({\n  uncompletedTodosCount,\n  status,\n  setStatus,\n  isSomeTodosCompleted,\n}) => {\n  const { clearCompleted } = useContext(AppContext);\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"TodosCounter\">\n        {`${uncompletedTodosCount} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          href=\"#/\"\n          className={cn('filter__link', {\n            selected: status === Status.All,\n          })}\n          data-cy=\"FilterLinkAll\"\n          onClick={() => setStatus(Status.All)}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={cn('filter__link', {\n            selected: status === Status.Active,\n          })}\n          data-cy=\"FilterLinkActive\"\n          onClick={() => setStatus(Status.Active)}\n        >\n          Active\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={cn('filter__link', {\n            selected: status === Status.Completed,\n          })}\n          data-cy=\"FilterLinkCompleted\"\n          onClick={() => setStatus(Status.Completed)}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        type=\"button\"\n        className={cn('todoapp__clear-completed', {\n          disabled: !isSomeTodosCompleted,\n        })}\n        data-cy=\"ClearCompletedButton\"\n        disabled={!isSomeTodosCompleted}\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport cn from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Todo as TodoType } from '../../types/Todo';\nimport { useAppContext } from '../TodoContext/TodoContext';\n\ntype Props = {\n  todo: TodoType;\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({ todo }) => {\n  const {\n    deleteTodo,\n    selectedTodoIds,\n    handleToggleCompleted,\n    updateTodo,\n    loading: loadind,\n    error,\n  } = useAppContext();\n\n  const [isEditing, setIsEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(todo.title);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTitle) {\n      deleteTodo(todo.id);\n\n      return;\n    }\n\n    if (newTitle.trim() === todo.title.trim()) {\n      setIsEditing(false);\n\n      return;\n    }\n\n    updateTodo({\n      ...todo,\n      title: newTitle.trim(),\n    });\n\n    setIsEditing(false);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsEditing(false);\n      setNewTitle(todo.title);\n    }\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isEditing, error]);\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className={cn('todo', {\n        completed: todo.completed,\n      })}\n      onDoubleClick={() => setIsEditing(true)}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          onChange={() => handleToggleCompleted(todo)}\n          checked={todo.completed}\n        />\n      </label>\n\n      {isEditing ? (\n        <form onSubmit={handleSubmit} onBlur={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"todo__title-field\"\n            placeholder=\"Empty todo will be deleted\"\n            ref={inputRef}\n            value={newTitle}\n            onChange={(e) => setNewTitle(e.target.value)}\n            onKeyUp={(e) => handleKeyUp(e)}\n          />\n        </form>\n      ) : (\n        <>\n          <span data-cy=\"TodoTitle\" className=\"todo__title\">\n            {loadind ? newTitle : todo.title}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            data-cy=\"TodoDelete\"\n            onClick={() => deleteTodo(todo.id)}\n          >\n            ×\n          </button>\n        </>\n      )}\n\n      <div\n        data-cy=\"TodoLoader\"\n        className={cn('modal overlay', {\n          'is-active': selectedTodoIds.includes(todo.id),\n        })}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n});\n","import React, { useContext } from 'react';\nimport { Todo as TodoType } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { AppContext } from '../TodoContext/TodoContext';\n\ntype Props = {\n  todos: TodoType[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const { tempTodo } = useContext(AppContext);\n\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n\n      {tempTodo && <TodoItem key={tempTodo?.id} todo={tempTodo} />}\n    </section>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useContext } from 'react';\nimport { AppContext } from '../TodoContext/TodoContext';\n\nexport const ErrorMessage: React.FC = () => {\n  const { error, setError } = useContext(AppContext);\n\n  return (\n    <div className=\"notification is-danger is-light has-text-weight-normal\">\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => setError(null)}\n      />\n      {error}\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import cn from 'classnames';\nimport React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport { AppContext } from '../TodoContext/TodoContext';\nimport { ErrorType } from '../../types/ErrorType';\n\ntype Props = {\n  isEveryTodosCompleted: boolean;\n};\n\nexport const Header: React.FC<Props> = ({ isEveryTodosCompleted }) => {\n  const {\n    todoTitle, setTodoTitle, addTodo, setError, loading, todos, setTodos,\n  }\n    = useContext(AppContext);\n\n  const [isChecked, setIsChecked] = useState(\n    todos.every((todo) => todo.completed),\n  );\n\n  const fieldRender = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (todos.every((todo) => todo.completed)) {\n      setIsChecked(true);\n    } else {\n      setIsChecked(false);\n    }\n  }, [todos]);\n\n  const handleToggleAllChange = () => {\n    if (isChecked) {\n      setIsChecked(false);\n    } else {\n      setIsChecked(true);\n    }\n\n    setTodos(todos.map((todo) => ({ ...todo, completed: !isChecked })));\n  };\n\n  useEffect(() => {\n    if (fieldRender.current && !fieldRender.current.disabled) {\n      fieldRender.current.focus();\n    }\n  });\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event?.preventDefault();\n    if (!todoTitle.trim()) {\n      setError(ErrorType.titleIsEmpty);\n\n      setTimeout(() => setError(null), 2000);\n\n      return;\n    }\n\n    addTodo(todoTitle.trim());\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        className={cn('todoapp__toggle-all text-invisible', {\n          active: isEveryTodosCompleted,\n        })}\n        data-cy=\"ToggleAllButton\"\n        onClick={handleToggleAllChange}\n      >\n        {' '}\n      </button>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          ref={fieldRender}\n          value={todoTitle}\n          onChange={(e) => setTodoTitle(e.target.value)}\n          disabled={loading}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, {\n  useCallback, useContext, useEffect, useMemo,\n} from 'react';\nimport { UserWarning } from './UserWarning';\nimport { Footer } from './components/Footer/Footer';\nimport { getTodos } from './api/todos';\nimport { prepareTodos } from './utils/helpers';\nimport { ErrorType } from './types/ErrorType';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { AppContext } from './components/TodoContext/TodoContext';\nimport { USER_ID } from './constants/UserId';\nimport { ErrorMessage } from './components/ErrorMessage/ErrorMessage';\nimport { Header } from './components/Header/Header';\n\nexport const App: React.FC = () => {\n  const {\n    todos, setTodos, status, setStatus, error, setError,\n  }\n    = useContext(AppContext);\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(setTodos)\n      .catch(() => setError(ErrorType.cantLoadTodos));\n  }, [setTodos, setError]);\n\n  const filterTodos = useCallback(() => {\n    return prepareTodos({\n      todos,\n      status,\n    });\n  }, [todos, status]);\n\n  const todosOnPage = useMemo(() => filterTodos(), [filterTodos]);\n\n  const uncompletedTodosCount = todos.filter((todo) => !todo.completed).length;\n\n  const isSomeTodosCompleted = todos.some((todo) => todo.completed);\n\n  const isEveryTodosCompleted = todosOnPage.every((todo) => todo.completed);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header isEveryTodosCompleted={isEveryTodosCompleted} />\n\n        <TodoList todos={todosOnPage} />\n\n        {todos.length > 0 && (\n          <Footer\n            uncompletedTodosCount={uncompletedTodosCount}\n            status={status}\n            setStatus={setStatus}\n            isSomeTodosCompleted={isSomeTodosCompleted}\n          />\n        )}\n\n        {error && todos.length > 0 && <ErrorMessage />}\n      </div>\n    </div>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\ntype TodoList = {\n  status: Status;\n  todos: Todo[];\n};\n\nexport const prepareTodos = ({ todos, status }: TodoList) => {\n  switch (status) {\n    case Status.Active:\n      return todos.filter((todo) => !todo.completed);\n\n    case Status.Completed:\n      return todos.filter((todo) => todo.completed);\n\n    default:\n      return todos;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AppProvider } from './components/TodoContext/TodoContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}